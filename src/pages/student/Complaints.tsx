import { useEffect, useState } from "react";
import DashboardLayout from "@/components/student/DashboardLayout";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { supabase } from "@/integrations/supabase/client";
import { MessageSquare, Plus, Clock, CheckCircle, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface Complaint {
  id: string;
  ticket_number: string;
  title: string;
  description: string;
  category: string;
  status: string;
  created_at: string;
}

const Complaints = () => {
  const [complaints, setComplaints] = useState<Complaint[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("");
  const { toast } = useToast();

  useEffect(() => {
    fetchComplaints();
  }, []);

  const fetchComplaints = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;

    const { data } = await supabase
      .from("complaints")
      .select("*")
      .eq("student_id", user.id)
      .order("created_at", { ascending: false });

    if (data) {
      setComplaints(data);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;

    const { error } = await supabase.from("complaints").insert({
      student_id: user.id,
      title,
      description,
      category,
      ticket_number: "", // Will be auto-generated by trigger
    });

    if (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to submit complaint",
      });
    } else {
      toast({
        title: "Success",
        description: "Complaint submitted successfully",
      });
      setIsOpen(false);
      setTitle("");
      setDescription("");
      setCategory("");
      fetchComplaints();
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "pending":
        return <Clock className="w-5 h-5 text-warning" />;
      case "in_progress":
        return <AlertCircle className="w-5 h-5 text-primary" />;
      case "resolved":
        return <CheckCircle className="w-5 h-5 text-success" />;
      default:
        return null;
    }
  };

  return (
    <DashboardLayout title="Smart Complaints">
      <div className="mb-6">
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogTrigger asChild>
            <Button className="bg-gradient-accent">
              <Plus className="w-4 h-4 mr-2" />
              Raise New Complaint
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Submit New Complaint</DialogTitle>
            </DialogHeader>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  required
                />
              </div>
              <div>
                <Label htmlFor="category">Category</Label>
                <Select value={category} onValueChange={setCategory} required>
                  <SelectTrigger>
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="hostel">Hostel</SelectItem>
                    <SelectItem value="lab">Lab</SelectItem>
                    <SelectItem value="admin">Admin</SelectItem>
                    <SelectItem value="academic">Academic</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  required
                  rows={4}
                />
              </div>
              <Button type="submit" className="w-full bg-gradient-primary">
                Submit Complaint
              </Button>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="space-y-4">
        {complaints.length === 0 ? (
          <Card className="p-12 text-center">
            <MessageSquare className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
            <p className="text-muted-foreground">No complaints submitted</p>
          </Card>
        ) : (
          complaints.map((complaint) => (
            <Card key={complaint.id} className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <div className="flex items-center gap-2 mb-1">
                    <h3 className="text-lg font-semibold text-foreground">
                      {complaint.title}
                    </h3>
                    <span className="text-xs bg-secondary px-2 py-1 rounded capitalize">
                      {complaint.category}
                    </span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Ticket: {complaint.ticket_number}
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  {getStatusIcon(complaint.status)}
                  <span className="capitalize text-sm font-medium">
                    {complaint.status.replace("_", " ")}
                  </span>
                </div>
              </div>
              <p className="text-muted-foreground mb-3">{complaint.description}</p>
              <p className="text-xs text-muted-foreground">
                Submitted on {new Date(complaint.created_at).toLocaleDateString()}
              </p>
            </Card>
          ))
        )}
      </div>
    </DashboardLayout>
  );
};

export default Complaints;
